// Code generated by MockGen. DO NOT EDIT.
// Source: ../port/cache.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRateLimit is a mock of RateLimit interface.
type MockRateLimit struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitMockRecorder
}

// MockRateLimitMockRecorder is the mock recorder for MockRateLimit.
type MockRateLimitMockRecorder struct {
	mock *MockRateLimit
}

// NewMockRateLimit creates a new mock instance.
func NewMockRateLimit(ctrl *gomock.Controller) *MockRateLimit {
	mock := &MockRateLimit{ctrl: ctrl}
	mock.recorder = &MockRateLimitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimit) EXPECT() *MockRateLimitMockRecorder {
	return m.recorder
}

// Expire mocks base method.
func (m *MockRateLimit) Expire(ctx context.Context, key string, window time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expire", ctx, key, window)
	ret0, _ := ret[0].(error)
	return ret0
}

// Expire indicates an expected call of Expire.
func (mr *MockRateLimitMockRecorder) Expire(ctx, key, window interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expire", reflect.TypeOf((*MockRateLimit)(nil).Expire), ctx, key, window)
}

// Increment mocks base method.
func (m *MockRateLimit) Increment(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increment", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Increment indicates an expected call of Increment.
func (mr *MockRateLimitMockRecorder) Increment(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increment", reflect.TypeOf((*MockRateLimit)(nil).Increment), ctx, key)
}

// Ping mocks base method.
func (m *MockRateLimit) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRateLimitMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRateLimit)(nil).Ping), ctx)
}
