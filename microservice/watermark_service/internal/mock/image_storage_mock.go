// Code generated by MockGen. DO NOT EDIT.
// Source: ../port/image_storage.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageStorage is a mock of ImageStorage interface.
type MockImageStorage struct {
	ctrl     *gomock.Controller
	recorder *MockImageStorageMockRecorder
}

// MockImageStorageMockRecorder is the mock recorder for MockImageStorage.
type MockImageStorageMockRecorder struct {
	mock *MockImageStorage
}

// NewMockImageStorage creates a new mock instance.
func NewMockImageStorage(ctrl *gomock.Controller) *MockImageStorage {
	mock := &MockImageStorage{ctrl: ctrl}
	mock.recorder = &MockImageStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageStorage) EXPECT() *MockImageStorageMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockImageStorage) Upload(ctx context.Context, filename string, imageData []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, filename, imageData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockImageStorageMockRecorder) Upload(ctx, filename, imageData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockImageStorage)(nil).Upload), ctx, filename, imageData)
}
