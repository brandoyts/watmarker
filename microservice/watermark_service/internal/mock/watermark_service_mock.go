// Code generated by MockGen. DO NOT EDIT.
// Source: ../port/watermark_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	port "github.com/brandoyts/watmarker/microservice/watermark_service/internal/core/port"
	gomock "github.com/golang/mock/gomock"
)

// MockWatermarkService is a mock of WatermarkService interface.
type MockWatermarkService struct {
	ctrl     *gomock.Controller
	recorder *MockWatermarkServiceMockRecorder
}

// MockWatermarkServiceMockRecorder is the mock recorder for MockWatermarkService.
type MockWatermarkServiceMockRecorder struct {
	mock *MockWatermarkService
}

// NewMockWatermarkService creates a new mock instance.
func NewMockWatermarkService(ctrl *gomock.Controller) *MockWatermarkService {
	mock := &MockWatermarkService{ctrl: ctrl}
	mock.recorder = &MockWatermarkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatermarkService) EXPECT() *MockWatermarkServiceMockRecorder {
	return m.recorder
}

// ProcessImage mocks base method.
func (m *MockWatermarkService) ProcessImage(ctx context.Context, in port.ProcessImageInput) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessImage", ctx, in)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessImage indicates an expected call of ProcessImage.
func (mr *MockWatermarkServiceMockRecorder) ProcessImage(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessImage", reflect.TypeOf((*MockWatermarkService)(nil).ProcessImage), ctx, in)
}
