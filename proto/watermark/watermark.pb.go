// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.15.8
// source: proto/watermark/watermark.proto

package watermarkpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ApplyWatermarkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyWatermarkRequest) Reset() {
	*x = ApplyWatermarkRequest{}
	mi := &file_proto_watermark_watermark_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyWatermarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyWatermarkRequest) ProtoMessage() {}

func (x *ApplyWatermarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_watermark_watermark_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyWatermarkRequest.ProtoReflect.Descriptor instead.
func (*ApplyWatermarkRequest) Descriptor() ([]byte, []int) {
	return file_proto_watermark_watermark_proto_rawDescGZIP(), []int{0}
}

func (x *ApplyWatermarkRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ApplyWatermarkRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ApplyWatermarkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageUrl      string                 `protobuf:"bytes,1,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApplyWatermarkResponse) Reset() {
	*x = ApplyWatermarkResponse{}
	mi := &file_proto_watermark_watermark_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApplyWatermarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyWatermarkResponse) ProtoMessage() {}

func (x *ApplyWatermarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_watermark_watermark_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyWatermarkResponse.ProtoReflect.Descriptor instead.
func (*ApplyWatermarkResponse) Descriptor() ([]byte, []int) {
	return file_proto_watermark_watermark_proto_rawDescGZIP(), []int{1}
}

func (x *ApplyWatermarkResponse) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

var File_proto_watermark_watermark_proto protoreflect.FileDescriptor

const file_proto_watermark_watermark_proto_rawDesc = "" +
	"\n" +
	"\x1fproto/watermark/watermark.proto\x12\twatermark\"?\n" +
	"\x15ApplyWatermarkRequest\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\"5\n" +
	"\x16ApplyWatermarkResponse\x12\x1b\n" +
	"\timage_url\x18\x01 \x01(\tR\bimageUrl2i\n" +
	"\x10WatermarkService\x12U\n" +
	"\x0eApplyWatermark\x12 .watermark.ApplyWatermarkRequest\x1a!.watermark.ApplyWatermarkResponseB4Z2github.com/watermarker/proto/watermark;watermarkpbb\x06proto3"

var (
	file_proto_watermark_watermark_proto_rawDescOnce sync.Once
	file_proto_watermark_watermark_proto_rawDescData []byte
)

func file_proto_watermark_watermark_proto_rawDescGZIP() []byte {
	file_proto_watermark_watermark_proto_rawDescOnce.Do(func() {
		file_proto_watermark_watermark_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_watermark_watermark_proto_rawDesc), len(file_proto_watermark_watermark_proto_rawDesc)))
	})
	return file_proto_watermark_watermark_proto_rawDescData
}

var file_proto_watermark_watermark_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_watermark_watermark_proto_goTypes = []any{
	(*ApplyWatermarkRequest)(nil),  // 0: watermark.ApplyWatermarkRequest
	(*ApplyWatermarkResponse)(nil), // 1: watermark.ApplyWatermarkResponse
}
var file_proto_watermark_watermark_proto_depIdxs = []int32{
	0, // 0: watermark.WatermarkService.ApplyWatermark:input_type -> watermark.ApplyWatermarkRequest
	1, // 1: watermark.WatermarkService.ApplyWatermark:output_type -> watermark.ApplyWatermarkResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_watermark_watermark_proto_init() }
func file_proto_watermark_watermark_proto_init() {
	if File_proto_watermark_watermark_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_watermark_watermark_proto_rawDesc), len(file_proto_watermark_watermark_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_watermark_watermark_proto_goTypes,
		DependencyIndexes: file_proto_watermark_watermark_proto_depIdxs,
		MessageInfos:      file_proto_watermark_watermark_proto_msgTypes,
	}.Build()
	File_proto_watermark_watermark_proto = out.File
	file_proto_watermark_watermark_proto_goTypes = nil
	file_proto_watermark_watermark_proto_depIdxs = nil
}
